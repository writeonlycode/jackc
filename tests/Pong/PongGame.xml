<class>
<keyword> class </keyword>
<identifier> 
<name> PongGame </name> 
<category> class </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<identifier> 
<name> PongGame </name> 
<category> static </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<identifier> 
<name> instance </name> 
<category> static </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> 
<name> Bat </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<identifier> 
<name> bat </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> 
<name> Ball </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<identifier> 
<name> ball </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> 
<name> wall </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> 
<name> exit </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> 
<name> score </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> 
<name> lastWall </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> 
<name> batWidth </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> 
<name> PongGame </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<identifier> 
<name> new </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> clearScreen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> batWidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> new </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 230 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> batWidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> new </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 253 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 222 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setDestination </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 400 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> drawRectangle </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 238 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 240 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Output </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> moveCursor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Output </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> printString </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Score: 0 </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> score </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> wall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> lastWall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> dispose </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> dispose </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> dispose </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Memory </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> deAlloc </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> 
<name> newInstance </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> instance </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> PongGame </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> new </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<identifier> 
<name> PongGame </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<identifier> 
<name> getInstance </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> 
<name> instance </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> run </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Keyboard </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> keyPressed </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> move </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> moveBall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Sys </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> wait </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 130 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 132 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 140 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> key </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Keyboard </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> keyPressed </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> move </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> moveBall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Sys </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> wait </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Output </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> moveCursor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 27 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Output </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> printString </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Game Over </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> moveBall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> 
<name> bouncingDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<identifier> 
<name> batLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<identifier> 
<name> batRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<identifier> 
<name> ballLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<identifier> 
<name> ballRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> wall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> move </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> wall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> wall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<identifier> 
<name> lastWall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> lastWall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> wall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> bouncingDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> batLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> getLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> batRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> getRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> ballLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> getLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> ballRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> getRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> wall </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> batLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> 
<name> ballRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> batRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> 
<name> ballLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> 
<name> exit </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> ballRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> batLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> bouncingDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> ballLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> &gt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> batRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> bouncingDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> batWidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> batWidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setWidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> 
<name> batWidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> score </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> score </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Output </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> moveCursor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Output </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> printInt </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> 
<name> score </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> ball </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> bounce </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> 
<name> bouncingDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
