<class>
<keyword> class </keyword>
<identifier> 
<name> Bat </name> 
<category> class </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> 
<name> x </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<identifier> 
<name> y </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> 
<name> width </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<identifier> 
<name> height </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> 
<name> direction </name> 
<category> field </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> 
<name> Bat </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<identifier> 
<name> new </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> 
<name> Ax </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> 
<name> Ay </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> 
<name> Awidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> 
<name> Aheight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Ax </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Ay </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Awidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> height </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Aheight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> direction </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> show </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> dispose </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Memory </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> deAlloc </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> show </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setColor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> draw </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> hide </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setColor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> draw </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> draw </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> drawRectangle </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> height </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> setDirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> 
<name> Adirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> direction </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Adirection </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> 
<name> getLeft </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> 
<name> getRight </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> setWidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> 
<name> Awidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> hide </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> Awidth </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> show </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> 
<name> move </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> direction </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setColor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> drawRectangle </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> height </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setColor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> drawRectangle </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> height </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> declaration </usage> 
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
<symbol> - </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setColor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> drawRectangle </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> height </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> setColor </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> 
<name> Screen </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> . </symbol>
<identifier> 
<name> drawRectangle </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> x </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> width </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> 
<name> y </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> 
<name> height </name> 
<category> subroutine </category> 
<index> 0 </index> 
<usage> use </usage> 
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
