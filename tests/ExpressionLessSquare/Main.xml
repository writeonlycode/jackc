<class><keyword> class </keyword><identifier> Main </identifier><symbol> { </symbol><classVarDec><keyword> static </keyword><type><keyword> boolean </keyword></type><identifier> test </identifier><symbol> ; </symbol></classVarDec><subRoutineDec><keyword> function </keyword><keyword> void </keyword><identifier> main </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subRoutineBody><symbol> { </symbol><varDec><keyword> var </keyword><type><identifier> SquareGame </identifier></type><identifier> game </identifier><symbol> ; </symbol></varDec><statement><letStatment><keyword> let </keyword><identifier> game </identifier><symbol> = </symbol><identifier> game </identifier><symbol> ; </symbol></letStatment></statement><statement><ifStatement><keyword> if </keyword><symbol> ( </symbol><identifier> b </identifier><symbol> ) </symbol><symbol> { </symbol><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><symbol> } </symbol></ifStatement></statement><statement><whileStatment><keyword> while </keyword><symbol> ( </symbol><identifier> b </identifier><symbol> ) </symbol><symbol> { </symbol><symbol> } </symbol></whileStatment></statement><statement><doStatement><keyword> do </keyword><subroutineCall><identifier> game </identifier><symbol> . </symbol><identifier> run </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></subroutineCall><symbol> ; </symbol></doStatement></statement><statement><doStatement><keyword> do </keyword><subroutineCall><identifier> game </identifier><symbol> . </symbol><identifier> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></subroutineCall><symbol> ; </symbol></doStatement></statement><statement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statement><symbol> } </symbol></subRoutineBody></subRoutineDec><subRoutineDec><keyword> function </keyword><keyword> void </keyword><identifier> more </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subRoutineBody><symbol> { </symbol><varDec><keyword> var </keyword><type><keyword> boolean </keyword></type><identifier> b </identifier><symbol> ; </symbol></varDec><statement><ifStatement><keyword> if </keyword><symbol> ( </symbol><identifier> b </identifier><symbol> ) </symbol><symbol> { </symbol><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><symbol> } </symbol></ifStatement></statement><statement><returnStatement><keyword> return </keyword><identifier> a </identifier><symbol> ; </symbol></returnStatement></statement><symbol> } </symbol></subRoutineBody></subRoutineDec><symbol> } </symbol></class>